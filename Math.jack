// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init()
    {
        let twoToThe = Array.new(16);
        do Math.setTwoToThe();
        return;
    }

    /** Initializes twoToThe Array with relevant values. */
    function void setTwoToThe()
    {
        var int i, val;
        let i = 0;
        let val = 1;
        while( i < 16 )
        {
            let twoToThe[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        return;
    }

    /** returns true if the i'th element is 1 in the binary representation of integer x */
    function boolean bit(int x, int i)
    {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
        if( x < 0)
        {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y)
    {
        // declare local vars
        var int shiftX, sum, iter;
        // set local vars
        let shiftX = x;
        let sum = 0;
        let iter = 0;
        // iteration
        while(iter < 16)
        {
            if(Math.bit(y, iter)
            {
                let sum = sum + shiftX;
            }
            //shift shiftX by 1 - multiply by 2 in decimal is shift left by 1 in binary
            let shiftX = shiftX + shiftX;
            let iter = iter + 1;
        }
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y)
    {
        var int q, division;
        // Handling a neg/pos or pos/neg case
        var int isNegX, isNegY;
        let isNegX = 0;
        let isNegY = 0;
        if( x < 0 )
        {
            let isNegX = 1;
            let x = x.Math.abs(x);
        }
        if( y < 0)
        {
            let isNegY = 1;
            let y = y.Math.abs(y);
        }

        // base case
        if( y > x )
        {
            return 0;
        }

        // calculation and recursive call
        let q = Math.divide(x, 2*y);
        if((x-((q+q)*y)) < y)
        {
            let division = q+q;
        }
        else
        {
            let division = (q+q)+1;
        }

        // Handling a neg/pos or pos/neg case
        if ((isNegX +isNegY) = 1)
        {
            return -division;
        }
        return division;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
        var int y, index;
        let y = 0;
        let index = 7; //(16/2)-1
        while (~(index < 0))
        {
            if(~( y + twoToThe[index]) > x) // y+2^index <= x
            {
                if(( y + twoToThe[index]) > 0) // y+2^index > 0 for overflow
                {
                    let y = y + twoToThe[index];
                }
            }
            let index = index - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b)
    {
        if( b > a )
        {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b)
    {
        if( b < a )
        {
            return b;
        }
        return a;
    }
}
