// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLen, length;
    field Array chars;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(~(maxLength>0)){
            let maxLength=1;
        }
        let chars = Array.new(maxLength);
        let maxLen=maxLength;
        let length=0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[length]=c;
        let length = length+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length=length-1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, i;
        var boolean neg;
        let neg = false;
        let sum=0;
        let i=0;
        if (chars[i]=45){
            let neg=true;
            let i=1;
        }
        while(i<length & String.isDigit(chars[i]))
        {
            let sum = (sum*10) + (chars[i] - 48);
            let i=i+1;
        }
        if (neg){
            let sum=-sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    let length=0;
    if (val<0){
        do appendChar(45);
        let val=-val;
    }
    do setIntRec(val);
    return;
    }

    /** Returns the new line character. */
    function char newLine() {
    return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    return 34;
    }

    function boolean isDigit(char c){
        return c>47 & c<58;
    }
    method void setIntRec(int val){
        var int mod, div;
        if (val<10){
            do appendChar(val+48);
        }
        else{
          let div = val/10;
          let mod = val - (div*10);
          do setIntRec(div);
          do appendChar(mod+48);
        }
        return;
    }
}
