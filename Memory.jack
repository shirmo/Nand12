// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM;
    static Array heap;
    static int heapBase;
    static Array freeList;

    /** Initializes the class. */
    function void init()
    {
        let RAM = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address)
    {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value)
    {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size)
    {
        var int addr;
        var int position;
        var int prev;
        let position = freeList;
        let prev = freeList;
        while(position[1] < size) //first fit
        {
            let prev = position;
            let position = freeList[position];
        }
        if(size = position[1])
        {
            let prev[0] = position[0];
        }
        //computes the address of the last (size + 2) spots in the segment
        let addr = position + position[1] - size;
        let position [1] = position[1] - (size + 2);// computes the size again
        let addr[0] = 0;
        let addr[1] = size;
        return addr + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o)
    {
        var int newPointer;
        let newPointer = o-2;
        let newPointer = freeList;
        let freeList = o - 2;
        return;
    }
}
